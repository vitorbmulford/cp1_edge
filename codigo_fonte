#include <WiFi.h>           // Biblioteca para conectar o ESP32 à rede Wi-Fi
#include <PubSubClient.h>    // Biblioteca para comunicação MQTT

// Configurações de rede e MQTT - variáveis editáveis
const char* default_SSID = "Wokwi-GUEST";               // Nome da rede Wi-Fi
const char* default_PASSWORD = "";                      // Senha da rede Wi-Fi
const char* default_BROKER_MQTT = "4.236.177.132";      // IP do Broker MQTT
const int default_BROKER_PORT = 1883;                   // Porta do Broker MQTT
const char* default_TOPICO_SUBSCRIBE = "/TEF/lamp001/cmd"; // Tópico de escuta (recepção de comandos)
const char* default_TOPICO_PUBLISH_1 = "/TEF/lamp001/attrs";  // Tópico para enviar o estado do LED
const char* default_TOPICO_PUBLISH_2 = "/TEF/lamp001/attrs/l"; // Tópico para enviar a leitura de luminosidade
const char* default_ID_MQTT = "fiware_001";             // ID MQTT do dispositivo
const int default_D4 = 2;                               // Pino do LED onboard

// Variáveis configuráveis
char* SSID = const_cast<char*>(default_SSID);           // Rede Wi-Fi
char* PASSWORD = const_cast<char*>(default_PASSWORD);   // Senha da rede Wi-Fi
char* BROKER_MQTT = const_cast<char*>(default_BROKER_MQTT); // Endereço do broker MQTT
int BROKER_PORT = default_BROKER_PORT;                  // Porta do broker MQTT
char* TOPICO_SUBSCRIBE = const_cast<char*>(default_TOPICO_SUBSCRIBE);  // Tópico de subscrição
char* TOPICO_PUBLISH_1 = const_cast<char*>(default_TOPICO_PUBLISH_1);  // Tópico para envio de status do LED
char* TOPICO_PUBLISH_2 = const_cast<char*>(default_TOPICO_PUBLISH_2);  // Tópico para envio de luminosidade
char* ID_MQTT = const_cast<char*>(default_ID_MQTT);     // ID MQTT do dispositivo
int D4 = default_D4;                                    // Pino do LED onboard
const int potPin = 34;                                  // Pino do sensor de luminosidade (potenciômetro)

// Inicializa cliente Wi-Fi e MQTT
WiFiClient espClient;
PubSubClient MQTT(espClient);
char EstadoSaida = '0';                                 // Estado do LED (0 = desligado, 1 = ligado)

// Função para inicializar a comunicação serial
void initSerial() {
    Serial.begin(115200);                               // Inicia a serial a 115200 baud
}

// Função para configurar e conectar à rede Wi-Fi
void initWiFi() {
    delay(10);
    Serial.println("------ Conexao WI-FI ------");
    Serial.print("Conectando-se na rede: ");
    Serial.println(SSID);                               // Exibe o nome da rede
    Serial.println("Aguarde");
    reconectWiFi();                                     // Conecta à rede Wi-Fi
}

// Função para configurar o broker MQTT
void initMQTT() {
    MQTT.setServer(BROKER_MQTT, BROKER_PORT);           // Configura o endereço e porta do broker MQTT
    MQTT.setCallback(mqtt_callback);                    // Define a função de callback para lidar com mensagens MQTT
}

// Função de configuração inicial (executada uma vez)
void setup() {
    InitOutput();                                       // Inicializa o LED onboard
    initSerial();                                       // Inicia comunicação serial
    initWiFi();                                         // Conecta ao Wi-Fi
    initMQTT();                                         // Conecta ao broker MQTT
    delay(5000);
    MQTT.publish(TOPICO_PUBLISH_1, "s|on");             // Publica o estado inicial do LED (ligado)
}

// Função principal (executada continuamente)
void loop() {
    VerificaConexoesWiFIEMQTT();                        // Verifica e restabelece conexões Wi-Fi e MQTT
    EnviaEstadoOutputMQTT();                            // Envia o estado atual do LED para o broker MQTT
    handleLuminosity();                                 // Lê e envia os dados de luminosidade
    MQTT.loop();                                        // Mantém o loop MQTT ativo
}

// Função para reconectar ao Wi-Fi caso a conexão seja perdida
void reconectWiFi() {
    if (WiFi.status() == WL_CONNECTED)                  // Verifica se o Wi-Fi está conectado
        return;
    WiFi.begin(SSID, PASSWORD);                         // Tenta se conectar ao Wi-Fi
    while (WiFi.status() != WL_CONNECTED) {
        delay(100);                                     // Aguarda até que a conexão seja estabelecida
        Serial.print(".");                              // Exibe um ponto enquanto espera
    }
    Serial.println();
    Serial.println("Conectado com sucesso na rede ");
    Serial.print(SSID);
    Serial.println("IP obtido: ");
    Serial.println(WiFi.localIP());                     // Exibe o IP atribuído ao ESP32

    digitalWrite(D4, LOW);                              // Garante que o LED inicie desligado
}

// Função de callback para lidar com mensagens recebidas via MQTT
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    String msg;
    for (int i = 0; i < length; i++) {
        char c = (char)payload[i];
        msg += c;
    }
    Serial.print("- Mensagem recebida: ");
    Serial.println(msg);

    // Define os padrões de comando para ligar e desligar o LED
    String onTopic = String("lamp001@on|");
    String offTopic = String("lamp001@off|");

    // Compara a mensagem recebida com os padrões e aciona o LED
    if (msg.equals(onTopic)) {
        digitalWrite(D4, HIGH);                         // Liga o LED
        EstadoSaida = '1';                              // Atualiza o estado do LED
    }

    if (msg.equals(offTopic)) {
        digitalWrite(D4, LOW);                          // Desliga o LED
        EstadoSaida = '0';                              // Atualiza o estado do LED
    }
}

// Função para verificar e reconectar as conexões Wi-Fi e MQTT
void VerificaConexoesWiFIEMQTT() {
    if (!MQTT.connected())                              // Verifica se está conectado ao broker MQTT
        reconnectMQTT();                                // Se não estiver, tenta reconectar
    reconectWiFi();                                     // Tenta reconectar ao Wi-Fi, se necessário
}

// Função para enviar o estado do LED via MQTT
void EnviaEstadoOutputMQTT() {
    if (EstadoSaida == '1') {
        MQTT.publish(TOPICO_PUBLISH_1, "s|on");         // Publica "ligado" se o LED estiver aceso
        Serial.println("- Led Ligado");
    }

    if (EstadoSaida == '0') {
        MQTT.publish(TOPICO_PUBLISH_1, "s|off");        // Publica "desligado" se o LED estiver apagado
        Serial.println("- Led Desligado");
    }
    Serial.println("- Estado do LED onboard enviado ao broker!");
    delay(1000);                                        // Atraso para evitar envio excessivo
}

// Função para configurar o LED onboard e piscá-lo no início
void InitOutput() {
    pinMode(D4, OUTPUT);                                // Define o pino do LED como saída
    digitalWrite(D4, HIGH);                             // Inicia o LED ligado
    boolean toggle = false;

    // Pisca o LED 10 vezes para sinalizar que o dispositivo foi iniciado
    for (int i = 0; i <= 10; i++) {
        toggle = !toggle;
        digitalWrite(D4, toggle);
        delay(200);
    }
}

// Função para reconectar ao broker MQTT, se necessário
void reconnectMQTT() {
    while (!MQTT.connected()) {
        Serial.print("* Tentando se conectar ao Broker MQTT: ");
        Serial.println(BROKER_MQTT);
        if (MQTT.connect(ID_MQTT)) {
            Serial.println("Conectado com sucesso ao broker MQTT!");
            MQTT.subscribe(TOPICO_SUBSCRIBE);           // Se conectado, subscreve ao tópico
        } else {
            Serial.println("Falha ao reconectar no broker.");
            Serial.println("Haverá nova tentativa de conexão em 2s");
            delay(2000);                                // Aguarda 2 segundos antes de tentar novamente
        }
    }
}

// Função para ler o valor de luminosidade e enviar via MQTT
void handleLuminosity() {
    int sensorValue = analogRead(potPin);               // Lê o valor do sensor de luminosidade (potenciômetro)
    int luminosity = map(sensorValue, 0, 4095, 0, 100); // Mapeia o valor lido (0-4095) para uma escala de 0 a 100
    String mensagem = String("{\"l\": ") + luminosity + "}";  // Cria uma mensagem JSON com o valor de luminosidade
    Serial.println("Publicando luminosidade: " + mensagem);
    MQTT.publish(TOPICO_PUBLISH_2, mensagem.c_str());   // Publica a luminosidade no tópico MQTT
    delay(3000);                                        // Atraso para evitar sobrecarga
}
